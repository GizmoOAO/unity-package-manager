name: Build release

on:
  push:
    branches:
      - dev
  # create:
  #   tags:
  #     - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Build app
        run: |
          version="${GITHUB_REF##*/}"
          gitHash="$(git show -s --format=%h)"
          LINKFLAGS="-H windowsgui -X upm/cmd.gitHash=$gitHash -X upm/cmd.version=$version"
          cat versioninfo.json | jq ".StringFileInfo.ProductVersion=\"$version\"" | jq ".StringFileInfo.FileVersion=\"$version (build_$gitHash)\"" > versioninfo.json
          cat versioninfo.json
          export PATH=$PATH:$(go env GOPATH)/bin
          CGO_ENABLED=0
          GOOS=windows
          GOARCH=amd64
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo
          go generate
          go build -o "./out/unity-package-manager.exe" -ldflags "$LINKFLAGS"

      - name: Package file
        run: |
          7z a unity-package-manager.zip out/*
          7z a unity-package-manager.zip LICENSE
          7z a unity-package-manager.zip README.md

      - uses: actions/upload-artifact@v2
        with:
          name: unity-package-manager
          path: unity-package-manager.zip
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./unity-package-manager.zip
      #     asset_name: unity-package-manager.zip
      #     asset_content_type: application/zip
